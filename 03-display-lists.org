
#+BEGIN_SRC lisp
  (defpackage #:eu.turtleware.charming-clim/l2
    (:export #:display #:erase #:repaint))

  (defpackage #:eu.turtleware.charming-clim
    (:use #:common-lisp
          #:eu.turtleware.charming-clim/l0
          #:eu.turtleware.charming-clim/l1
          #:eu.turtleware.charming-clim/l2))
#+END_SRC

Since we are adding another layer of abstraction it is time to
organize files in modules.

#+BEGIN_SRC lisp
  (defsystem "eu.turtleware.charming-clim"
    :defsystem-depends-on (#:cffi)
    :depends-on (#:alexandria #:cffi #:swank)
    :components ((:file "packages")
                 (:module "level0"
                  :depends-on ("packages")
                  :pathname ""
                  :components ((:cfile "raw-mode")
                               (:file "terminal")))
                 (:module "level1"
                  :depends-on ("packages" "level0")
                  :pathname ""
                  :components ((:file "cursor")
                               (:file "output")
                               (:file "surface" :depends-on ("output"))
                               (:file "console" :depends-on ("cursor" "output"))))
                 (:module "level2"
                  :depends-on ("packages" "level0" "level1")
                  :pathname ""
                  :components ((:file "frame-manager")))
                 (:file "example" :depends-on ("packages" "level1" "level2"))))
#+END_SRC

 which
have a specialization on the method ~repaint~. Then we are not
operating on cells, but rather on "things" displayed on the screen
with their own identity. Removing such object is abstracted with the
function ~erase~.


A good example of an object with a display list is a frame manager.
We'll reimplemnt demos in terms of the new abstraction. For now only
the frame manager will operate in retained mode, while applications
will use the immediate rendering mode as they did.

The frame manager is a ~console~ which output is the terminal (which
is represented as the ~(eql t)~ specialization). It is not possible to
display and erase a console from the terminal. Repainting the manager
is done in three steps:

- clear the screen
- repaint each frame on the display list
- show the modeline

#+BEGIN_SRC lisp
  ;; frame-manager.lisp
  (in-package #:eu.turtleware.charming-clim)

  (defgeneric display (target object))
  (defgeneric erase   (target object))
  (defgeneric repaint (target object))

  (defclass frame-manager (console)
    ((frames :initarg :frames :accessor frames :documentation "All frames")
     (active :initarg :active :accessor active :documentation "Active frame"))
    (:default-initargs :frames nil :active nil))

  (defmethod display ((obj (eql t)) (fm frame-manager))
    (error "Don't know how to display FM on the terminal!"))

  (defmethod erase ((obj (eql t)) (fm frame-manager))
    (error "Don't know how to erase FM from the terminal!"))

  (let ((cycle-start 0)
        (frame-count 0)
        (last-second 0))
   (defun show-modeline ()
     (flet ((get-fps ()
              (if (> (- (get-internal-real-time) cycle-start)
                     internal-time-units-per-second)
                  (setf cycle-start (get-internal-real-time)
                        last-second frame-count
                        frame-count 0)
                  (incf frame-count))
              last-second)
            (get-cpf ()
              (prog1 *counter*
                (setf *counter* 0))))
       (let ((row (rows *console*))
             (col (cols *console*))
             (fps (get-fps))
             (wch (get-cpf)))
         (ctl (:bgc #x11111100)
              (:fgc #xbbbbbb00))
         (out (:row row :col 1)
              (format nil "Dim: ~3d x ~3d, FPS: ~5d, WCH: ~5d" row col fps wch))))))

  (defmethod repaint ((obj (eql t)) (fm frame-manager))
    (ctl (:clr 1 1 (rows fm) (cols fm)))
    (dolist (frame (reverse (frames fm)))
      (repaint fm frame))
    (ctl (:bgc #x11111100)
         (:fgc #xbbbbbb00))
    (show-modeline)
    (ctl (:fls)))
#+END_SRC

Displaying a frame on the frame manager requires adding it to the
frame manager's display list and setting a frame's sink to the frame
manager. Erasing it is the opposite operation. Repainting the frame is
a matter of drawing window decorations and calling the repaint on a
frame itself.

#+BEGIN_SRC lisp
  (defclass frame (surface) ())

  (defmethod display ((fm frame-manager) (frame frame))
    (push frame (frames fm))
    (setf (sink frame) fm))

  (defmethod erase ((fm frame-manager) (frame frame))
    (setf (frames fm) (remove frame (frames fm)))
    (setf (sink frame) nil))

  (defmethod repaint ((fm frame-manager) (frame frame))
    (let ((r1 (r1 frame))
          (c1 (c1 frame))
          (r2 (r2 frame))
          (c2 (c2 frame)))
      (if (eq frame (active fm))
          (ctl (:bgc #x33336600) (:fgc #xffffff00))
          (ctl (:bgc #x33333300) (:fgc #xbbbbbb00)))
      (ctl (:clr r1 c1 r2 c2))
      (loop with col = (1+ c2)
            for row from (1+ r1) upto (1- r2)
            do (out (:row row :col col) " ")
            finally (out (:col col :row r1 :fgc #xff224400) "x")
                    (when (or (> (rows frame) (1+ (- r2 r1)))
                              (> (cols frame) (1+ (- c2 c1))))
                      (out (:col col :row (1- r2)) "&"))
                    (out (:col col :row r2) "/")))
    (with-buffer (frame)
      (repaint frame t)
      (ctl (:fls :force t))))
#+END_SRC

As for examples, when we start the display, we change the class of the
object ~*console*~ to the class ~frame-manager~. In ~handle-event~ we
only change the C-n gesture to cycle the active windows. That ensures
z-ordering where last active window is only below the current active.
Don't forget to remove classes ~frame~ and ~frame-manager~ from the
~exmaple~ file.

#+BEGIN_SRC lisp
  (defun make-window (type &rest args)
    (apply #'make-instance type :sink *buffer* args))

  (defun ensure-demos (fm)
    (unless (frames fm)
      (setf (frames fm)
            (list (make-window 'lambda-demo    :r1 2  :c1 4  :r2 13 :c2 43)
                  (make-window 'noise-demo     :r1 2  :c1 50 :r2 13 :c2 77)
                  (make-window 'animation-demo :r1 5  :c1 10 :r2 11 :c2 70)
                  (make-window 'report-demo    :r1 15 :c1 10 :r2 20 :c2 70)))))

  (defun handle-event (fm event)
    (flet ((reset ()
             (update-console-dimensions)
             (clear-terminal)
             (ctl (:bgc #x22222200)
                  (:clr 1 1 (rows *console*) (cols *console*)))))
      (cond ((keyp event #\Q :c)
             (cl-user::quit))
            ((keyp event #\R :c)
             (reset)
             (setf (frames fm) nil)
             (setf (active fm) nil)
             (ensure-demos fm))
            ((keyp event :f5)
             (ctl (:fls :force t)))
            ((keyp event #\N :c)
             (let* ((frames (frames fm))
                    (new-active (car (last frames)))
                    (new-frames (butlast frames)))
               (setf (frames fm) (cons new-active new-frames)
                     (active fm) new-active)))
            ((keyp event #\U :c)
             (ignore-errors (user-action)))
            ((keyp event #\E :c)
             (error "bam"))
            ((keyp event :key-up)
             (alexandria:when-let ((frame (active fm)))
               (ctl (:scr frame -1 0))))
            ((keyp event :key-left)
             (alexandria:when-let ((frame (active fm)))
               (ctl (:scr frame 0 -1))))
            ((keyp event :key-down)
             (alexandria:when-let ((frame (active fm)))
               (ctl (:scr frame 1 0))))
            ((keyp event :key-right)
             (alexandria:when-let ((frame (active fm)))
               (ctl (:scr frame 0 1))))
            ((keyp event :key-up :c)
             (alexandria:when-let ((frame (active fm)))
               (ctl (:mov frame -1 0))))
            ((keyp event :key-down :c)
             (alexandria:when-let ((frame (active fm)))
               (ctl (:mov frame 1 0))))
            ((keyp event :key-left :c)
             (alexandria:when-let ((frame (active fm)))
               (ctl (:mov frame 0 -1))))
            ((keyp event :key-right :c)
             (alexandria:when-let ((frame (active fm)))
               (ctl (:mov frame 0 1)))))))

  (defun frame-manager-loop (fm)
    (with-buffer (fm)
      (flet ((handle-events (fm)
               (loop for event = (read-input)
                     until (null event)
                     do (handle-event fm event))))
        (loop do (ensure-demos fm)
              do (handle-events fm)
              do (repaint t fm)))))

  (defun start-display ()
    (loop
      (with-simple-restart (again "Start display again.")
        (ignore-errors (swank:create-server))
        (handler-case
            (with-console (:ios *terminal-io*)
              (change-class *console* 'frame-manager :active nil :frames nil)
              (frame-manager-loop *console*))
          (error (sig) (error sig))))))
#+END_SRC

Implementing a demo is a matter of defining its class and defining the
~repaint~ method specialized on the frame.

#+BEGIN_SRC lisp
  (defclass noise-demo (frame)
    ((ap :initarg :ap :accessor ap))
    (:default-initargs :ap '(#xffff8800 #x88ffff00)))

  (defmethod repaint ((frame noise-demo) object)
    (declare (ignore object))
    (loop for row from 1 upto (rows frame)
          do (loop for col from 1 upto (cols frame)
                   do (out (:row row
                            :col col
                            :bgc (alexandria:random-elt `(#x00000000 #x08080800))
                            :fgc (alexandria:random-elt (ap frame)))
                           (alexandria:random-elt '("+" "-"))))))

  (defclass lambda-demo (frame)
    ()
    (:default-initargs :rows 12 :cols 40))

  (defmethod repaint ((frame lambda-demo) object)
    (declare (ignore object))
    (flet ((ll (row col)
             (or (and (< (abs (- (+ col row) 26)) 2)
                      (<= col 20))
                 (< (abs (- (+ (- 40 col) row) 26)) 2))))
      (with-clipping (*buffer* :fn #'ll :r1 2 :r2 11)
        (out (:row (1+ (random 12))
              :col (1+ (random 40))
              :bgc #x00000000
              :fgc #xbb000000)
             (alexandria:random-elt '("X" "O"))))
      (with-clipping (*buffer* :fn (lambda (row col)
                                     (or (= row 1)
                                         (= row 12)
                                         (funcall (complement #'ll) row col))))
        (out (:row (1+ (random 12))
              :col (1+ (random 40))
              :bgc #x00000000
              :fgc (alexandria:random-elt '(#x00444400 #x00444400 #x00664400)))
             (alexandria:random-elt '("+" "-"))))))

  (defclass animation-demo (frame)
    ((sqr-speed :initarg :sqr-speed :reader sqr-speed)
     (direction :initarg :direction :accessor direction)
     (last-time :initarg :last-time :accessor last-time)
     (current-row :accessor current-row)
     (current-col :accessor current-col)
     (minimum-col :accessor minimum-col)
     (maximum-col :accessor maximum-col))
    (:default-initargs :sqr-speed 5
                       :direction 1
                       :last-time (get-internal-real-time)))

  (defmethod initialize-instance :after
      ((frame animation-demo) &key)
    (let ((rows (rows frame))
          (cols (cols frame)))
      (setf (current-row frame) (1+ (truncate rows 2))
            (current-col frame) (1+ (truncate cols 2))
            (minimum-col frame) (+ 1    2)
            (maximum-col frame) (- cols 2))))

  (defmethod repaint ((frame animation-demo) object)
    (declare (ignore object))
    (let* ((rows (rows frame))
           (cols (cols frame))
           (speed (sqr-speed frame))
           (now (get-internal-real-time))
           (delta (/ (- now (last-time frame))
                     internal-time-units-per-second))
           (direction (direction frame))
           (current-col (current-col frame))
           (minimum-col (minimum-col frame))
           (maximum-col (maximum-col frame)))
      ;; Set colors and clear the window background.
      (ctl (:bgc #x44440000)
           (:fgc #xffbb0000)
           (:clr 1 1 rows cols))
      ;; Advance the square.
      (incf current-col (* delta speed direction))
      ;; Draw the rectangle.
      (loop with row = (current-row frame)
            with col = (alexandria:clamp (round current-col)
                                         minimum-col
                                         maximum-col)
            for r from (- row 1) upto (+ row 1)
            do (loop for c from (- col 2) upto (+ col 2)
                     do (out (:row r :col c
                                          ;:bgc #xffffff00
                                   :fgc #xff00ff00) "#")))
      ;; Update variables
      (setf (current-col frame) current-col
            (direction frame) (cond ((< current-col minimum-col) +1)
                                    ((> current-col maximum-col) -1)
                                    (t direction))
            (last-time frame) now)))

  (defclass report-demo (frame)
    ((lines :initarg :lines :accessor lines))
    (:default-initargs
     :lines (loop for row from 1 upto 50
                  for id from 0
                  collect (format nil "XXX ~d/~d: ~a" id 50
                                  "I'd like to report an event here!"))
     :rows 50))

  (defmethod repaint ((frame report-demo) object)
    (ctl (:bgc #x00000000))
    (clear-rectangle 1 1 (rows frame) (cols frame))
    (loop for row from 1
          for str in (lines frame)
          do (out (:row row :col 1 :fgc #xff888800) str)))
#+END_SRC

That's it, we've reimplemented demos quite easily. That's not the end
of the story. We'll redefine our demos to do as little as possible by
chosing the correct rendering mode.

Noise demo uses immediate rendering. In other words it doesn't need to
go through an intermediate buffer, because the surface is already
buffered. The change is trivial, just add a new initarg which sets the
surface in a direct mode.

#+BEGIN_SRC lisp
(defclass noise-demo (frame)
  ((ap :initarg :ap :accessor ap))
  (:default-initargs :ap '(#xffff8800 #x88ffff00) :rnd :dir))
#+END_SRC


