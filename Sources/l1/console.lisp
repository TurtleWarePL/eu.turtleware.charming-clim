(in-package #:eu.turtleware.charming-clim)

(defvar *console*)

(defmacro with-console ((&rest args
                         &key
                           ios fgc bgc cvp fps
                           (console-class ''console)
                         &allow-other-keys)
                        &body body)
  (declare (ignore fgc bgc cvp fps))
  (remf args :console-class)
  `(let ((*terminal* ,ios)
         (console-class ,console-class))
     (loop
       (restart-case
           (let ((*console* (make-instance console-class ,@args)))
             (handler-case (with-buffer (*console*) ,@body)
               (error (e)
                 (close-terminal (hnd *console*))
                 (error e))
               (exit (e)
                 (close-terminal (hnd *console*))
                 (return))
               (:no-error (&rest values)
                 (close-terminal (hnd *console*)))))
         (again ()
           :report "Start display again.")
         (change (new-console-class)
           :report "Change the console class."
           :interactive (lambda ()
                          (format *debug-io* "Type the class symbol:~%")
                          (format *debug-io* "~a> '" (package-name *package*))
                          (finish-output *debug-io*)
                          (list (read)))
           (setf console-class new-console-class))))))

(defclass console (output-buffer)
  ((ios :initarg :ios :accessor ios :documentation "Console I/O stream")
   (cur :initarg :cur :accessor cur :documentation "Terminal cursor")
   (ptr :initarg :ptr :accessor ptr :documentation "Pointer device")
   (fps :initarg :fps :accessor fps :documentation "Desired framerate")
   (hnd               :accessor hnd :documentation "Terminal handler"))
  (:default-initargs :ios (error "I/O stream must be specified.")
                     :ptr t :cvp t))

(defmethod initialize-instance :after
    ((instance console) &rest args &key cvp ptr)
  (setf (hnd instance) (init-terminal))
  (set-mouse-tracking ptr)
  (setf (cur instance) (make-instance 'cursor  :cvp cvp))
  (setf (ptr instance) (make-instance 'pointer :cvp nil))
  (let ((*console* instance))
    (process-available-events t)))

(defmethod (setf ptr) :after (ptr (instance console))
  (set-mouse-tracking (not (null ptr))))

(defmethod flush-output ((buffer console) &rest args &key force)
  (declare (ignore args))
  (let* ((cursor (cur buffer))
         (last-fg (fgc cursor))
         (last-bg (bgc cursor))
         (gap 0))
    (set-cursor-position 1 1)
    (set-cursor-visibility nil)
    (iterate-cells (cell crow ccol wrap-p)
        (buffer 1 1 (make-array (* (cols buffer)
                                   (rows buffer))
                                :displaced-to (data buffer)))
      (when wrap-p
        (set-cursor-position crow ccol)
        (setf gap 0))
      (if (and cell (or force (dirty-p cell)))
          (let ((ch (ch cell))
                (fg (fg cell))
                (bg (bg cell)))
            (unless (= fg last-fg)
              (set-foreground-color fg)
              (setf last-fg fg))
            (unless (= bg last-bg)
              (set-background-color bg)
              (setf last-bg bg))
            (when (plusp gap)
              (cursor-right gap)
              (setf gap 0))
            (put ch)
            (setf (dirty-p cell) nil))
          (if force
              (put #\space)
              (incf gap))))
    (set-cursor-position (row cursor) (col cursor))
    (set-cursor-visibility (cvp cursor))
    (set-foreground-color (fgc cursor))
    (set-background-color (bgc cursor)))
  (finish-output *terminal*))

(defmethod put-cell ((buf console) row col str fgc bgc)
  (let ((cur (cur buf))
        (row (or row (row buf)))
        (col (or col (col buf)))
        (fgc (or fgc (fgc buf)))
        (bgc (or bgc (bgc buf))))
    (change-cursor-position cur row col)
    (change-cursor-pen cursor :fgc fgc :bgc bgc)
    (multiple-value-bind (final-row final-col)
        (iterate-cells (ch crow ccol wrap-p)
            (buf row col (string str))
          (when wrap-p
            (change-cursor-position cur crow ccol))
          (if (inside-p buf crow ccol)
              (put ch)
              (cursor-right)))
      (set-row final-row cur)
      (set-col final-col cur))))

(defmethod handle-event ((client console) (event terminal-resize-event))
  (let ((rows (rows event))
        (cols (cols event)))
    (setf (rows client) rows)
    (setf (cols client) cols)
    (setf (r2 (clip client)) rows)
    (setf (c2 (clip client)) cols)
    (adjust-array (data client)
                  (list rows cols)
                  :initial-element nil)))

(defmethod handle-event ((client console) (event keyboard-event))
  (cond ((keyp event #\Q :c)
         (signal 'exit))
        ((keyp event #\E :c)
         (error "HI!"))
        ((keyp event #\S :c)
         (swank:create-server :dont-close t))
        ((keyp event #\R :c)
         (process-available-events t)
         (clear-terminal)
         (ctl (:bgc #x22222200)
              (:clr 1 1 (rows *console*) (cols *console*))))))
