#+title: Charming CLIM tutorial part 3 – Rethinking the Input
#+author: Daniel 'jackdaniel' Kochmański
#+email: daniel@turtleware.eu

* Restructuring the project

Currently we have two abstraction levels:

- level 0 :: raw terminal access
- level 1 :: console and surfaces

The new system definition reflects this structure:

#+BEGIN_SRC lisp
(defsystem "eu.turtleware.charming-clim"
  :defsystem-depends-on (#:cffi)
  :depends-on (#:alexandria #:cffi #:swank)
  :pathname "Sources"
  :components ((:file "packages")
               (:module "l0"
                :depends-on ("packages")
                :components ((:cfile "raw-mode")
                             (:file "terminal" :depends-on ("raw-mode"))))
               (:module "l1"
                :depends-on ("packages" "l0")
                :components ((:file "cursor")
                             (:file "output")
                             (:file "surface" :depends-on ("output"))
                             (:file "console" :depends-on ("cursor" "output"))))
               (:module "l2"
                :depends-on ("packages" "l0" "l1")
                :components ((:file "display-lists")
                             (:file "frame-manager" :depends-on ("display-lists"))))))

(defsystem "eu.turtleware.charming-clim/demo"
  :license "BSD-2-Clause"
  :depends-on ("eu.turtleware.charming-clim")
  :pathname "Auxiliary"
  :components ((:file "example")))
#+END_SRC

For now files defined the module ~l2~ are empty. That will be our starting
point. We'll rename the API packages to match this change:

#+BEGIN_SRC lisp
(defpackage #:eu.turtleware.charming-clim/l0
  (:export #:init-terminal
           #:close-terminal
           #:*terminal*

           #:put #:esc #:csi #:sgr
           #:read-input #:keyp

           #:reset-terminal
           #:clear-terminal

           #:clear-line
           #:set-foreground-color
           #:set-background-color

           #:with-cursor-position
           #:set-cursor-position
           #:save-cursor-position
           #:restore-cursor-position
           #:request-cursor-position

           #:cursor-up
           #:cursor-down
           #:cursor-right
           #:cursor-left

           #:set-cursor-visibility
           #:set-mouse-tracking))

(defpackage #:eu.turtleware.charming-clim/l1
  (:export #:with-console #:out #:ctl))

(defpackage #:eu.turtleware.charming-clim/l2
  (:export))

(defpackage #:eu.turtleware.charming-clim
  (:use #:common-lisp
        #:eu.turtleware.charming-clim/l0
        #:eu.turtleware.charming-clim/l1
        #:eu.turtleware.charming-clim/l2))
#+END_SRC

You may clone the library on the commit after this change with the following
command:

#+BEGIN_SRC shell
  git clone --branch v0.2 git@github.com:TurtleWarePL/eu.turtleware.charming-clim.git
#+END_SRC

To start a demo on sbcl, it is enough to run:

#+BEGIN_SRC lisp
sbcl --eval "(ql:quickload 'eu.turtleware.charming-clim/demo)" \
     --eval "(eu.turtleware.charming-clim::start-display)"
#+END_SRC

* New event hierarchy

Currently the input processing is implemented with a function ~read-input~ and
accompanied with a predicate ~keyp~. ~read-input~ returns either a character
or an instance of the class ~gesture~. The function recognizes known escape
sequences. We'll be now more precise and different kind of gestures will have
another class, so it is possible to specialize on them. The class ~gesture~
will be replaced by a class hierarchy starting with ~event~ with appropriate
~print-object~ methods.

#+BEGIN_SRC lisp
  (defclass event () ())

  (defclass terminal-event (event) ())

  (defclass unknown-terminal-event (terminal-event)
    ((seq :initarg :seq :accessor seq)))

  (defclass cursor-position-event (terminal-event)
    ((row :initarg :row :accessor row)
     (col :initarg :col :accessor col)))

  (defclass keyboard-event (event)
    ((key :initarg :key :accessor key)
     (kch :initarg :kch :accessor kch)
     (mods :initarg :mods :accessor mods))
    (:default-initargs :mods 0 :kch nil))

  (defclass pointer-event (event)
    ((row :initarg :row :accessor row)
     (col :initarg :col :accessor col)
     (btn :initarg :btn :accessor btn)
     (mods :initarg :mods :accessor mods)
     (state :initarg :state :accessor state))
    (:default-initargs :mods 0))

  (defclass pointer-motion-event  (pointer-event) ())
  (defclass pointer-press-event   (pointer-event) ())
  (defclass pointer-release-event (pointer-event) ())

  (eval-when (:compile-toplevel :load-toplevel :execute)
    (defconstant  +c1-mod+   16)
    (defconstant  +meta-mod+  8)
    (defconstant  +ctrl-mod+  4)
    (defparameter +alt-mod+   2)
    (defconstant  +alt-mod*+  2)
    (defconstant  +shift-mod+ 1))

  (defun decode-mods (mods)
    (loop for p in (list +c1-mod+
                         +meta-mod+
                         +ctrl-mod+
                         +alt-mod*+
                         +shift-mod+)
          for k in '(:c1 :meta :ctrl :alt :shift)
          unless (zerop (logand mods p))
            collect k))

  (defun set-alt-is-meta (bool)
    (if bool
        (setf +alt-mod+ +meta-mod+)
        (setf +alt-mod+ +alt-mod*+)))

  (defmethod print-object ((o pointer-event) s)
    (print-unreadable-object (o s :type t :identity nil)
      (format s "~s ~s [~s] [~s]" (row o) (col o) (btn o)
              (decode-mods (mods o)))))

  (defmethod print-object ((o keyboard-event) s)
    (print-unreadable-object (o s :type t :identity nil)
      (format s "~a [~s]" (key o) (decode-mods (mods o)))))

  (defmethod print-object ((o cursor-position-event) s)
    (print-unreadable-object (o s :type t :identity nil)
      (format s "~s ~s" (row o) (col o))))

  (defmethod print-object ((o unknown-terminal-event) s)
    (print-unreadable-object (o s :type t :identity nil)
      (format s "~s" (seq o))))
#+END_SRC

Functions which created instances of a gesture now create instances of ~event~
subclasses:

#+BEGIN_SRC lisp
  (defun controlp (ch &aux (code (char-code ch)))
    "Predicate determining if the character is a control character.
  Returns a generalized boolean (when true returns a gesture)."
    (cond ((<= 0 code 31)
           (make-instance 'keyboard-event
                          :key (code-char (+ code 64))
                          :mods +ctrl-mod+))
          ((<= 128 code 159)
           (make-instance 'keyboard-event
                          :key (code-char (- code 64))
                          :mods +c1-mod+))))

  (defun maybe-combo (key num2)
    (alexandria:if-let ((ctrl (and (characterp key) (controlp key))))
      (prog1 ctrl
        (setf (mods ctrl) (logior (1- num2) +ctrl-mod+)))
      (or (and (= num2 1) key)
          (make-instance 'keyboard-gesture :key key :mods (1- num2)))))

  (defun resolve-key (group num1 num2 |Hasta la vista, baby|)
    (if (null |Hasta la vista, baby|)
        ;; When there is no terminating character, then it is probably a
        ;; result of pressing ALT+<char>. This is ambigous, i.e ALT+[
        ;; generates CSI. We try to be as robust as we can here.
        (maybe-combo (case group
                       (#.+escape+ :escape)
                       (#.+delete+ :delete)
                       (t group))
                     (1+ +alt-mod+))
        (funcall (gethash (+ (char-code |Hasta la vista, baby|)
                             (ash (char-code group) 8))
                          ,*key-resolvers*
                          (lambda (num1 num2)
                            (make-instance 'unknown-terminal-event
                                           :seq (list +escape+
                                                      group
                                                      num1 num2
                                                      |Hasta la vista, baby|))))
                 num1 num2)))

  (defun resolve-mouse (btn col row |Hasta la vista, baby|)
    (let ((state (cond ((not (zerop (ldb (byte 1 5) btn))) :motion)
                       ((char= #\M |Hasta la vista, baby|) :press)
                       ((char= #\m |Hasta la vista, baby|) :release)))
          (mods (+ (if (zerop (ldb (byte 1 2) btn)) 0 +shift-mod+)
                   (if (zerop (ldb (byte 1 3) btn)) 0 +alt-mod+)
                   (if (zerop (ldb (byte 1 4) btn)) 0 +ctrl-mod+)))
          (btn (case (+ (ldb (byte 2 0) btn)
                        (ash (ldb (byte 2 6) btn) 2))
                 (#b0000 :left)
                 (#b0001 :middle)
                 (#b0010 :right)
                 (#b0011 :none)
                 ;; 64
                 (#b0100 :wheel-up)
                 (#b0101 :wheel-down)
                 (#b0110 :wheel-left)
                 (#b0111 :wheel-right)
                 ;; 128 (xterm >= 341)
                 (#b1000 :extra-1)
                 (#b1001 :extra-2)
                 (#b1010 :extra-3)
                 (#b1011 :extra-4))))
      (make-instance (ecase state
                       (:motion 'pointer-motion-event)
                       (:press 'pointer-press-event)
                       (:release 'pointer-release-event))
                     :row row :col col :btn btn :mods mods :state state)))

  (defun read-input (&aux (ch (read-char-no-hang *terminal*)))
    ;; READ-CHAR may read more than one byte and return an alphanumeric
    ;; character.
    (cond ((null ch)
           (return-from read-input))
          ((graphic-char-p ch)
           (return-from read-input
             (make-instance 'keyboard-event :kch ch :key ch :mods 0)))
          ((deletep ch))
          ((escapep ch))
          ((controlp ch))
          (t (make-instance 'unknown-terminal-event :seq (list ch)))))

  (defun keyp (ch key &rest mods)
    (and (typep ch 'keyboard-event)
         (eql (key ch) key)
         (eql (mods ch)
              (loop for m in mods
                    summing (ecase m
                              (:c1 +c1-mod+)
                              (:m  +meta-mod+)
                              (:c  +ctrl-mod+)
                              (:a  +alt-mod*+)
                              (:s  +shift-mod+))))))
#+END_SRC

To distinguish between "normal" cursor position reports and answers to the
terminal size queries we will introduce a dynamic variable with a default
value ~nil~. When it is bound to ~t~, then received cursor position is treated
as a terminal size report.

#+BEGIN_SRC lisp
  (defvar *request-terminal-size* nil
    "When bound to T then TERMINAL-RESIZE-EVENT is returned instead of the
     CURSOR-POSITION-EVENT..")

  (defclass terminal-resize-event (terminal-event)
    ((rows :initarg :rows :accessor rows)
     (cols :initarg :cols :accessor cols)))

  (define-key-resolver #\[ #\R (row col)
    (if *request-terminal-size*
        (make-instance 'terminal-resize-event :rows row :cols col)
        (make-instance 'cursor-position-event :row row :col col)))
#+END_SRC

* Processing input

The input in general is asynchronous and may have numerous targets. For
instance the keyboard input may be processed by the text input field while the
pointer motion event is processed by both the frame manager (to update the
cursor position) and by a button which is highlighted when the pointer moves
over it. We will implement the input processing in a straight-forward fashion:
loop over all available events and leave handling them to the console object.
When necessary it is possible to build more sophisticated architecture on top
of this (slim) abstraction.

Create a new file ~input.lisp~ and add it to the system definition before the
console is loaded. Define in it the event processing loop and a protocol
function ~handle-event~ accepting two arguments: the client and the event. The
default method does nothing. We'll also add a condition and a function to
signal that the user wants to exit the application.

#+BEGIN_SRC lisp
  ;;; First we process available events and only after that (when requested)
  ;;; probe for the terminal size. This is made that way to avoid ambiguity.
  (defun process-available-events (&optional update-console-dimensions)
    (finish-output *terminal*)
    (loop for event = (read-input)
          until (null event)
          do (handle-event *console* event))
    (when update-console-dimensions
      (with-cursor-position ((expt 2 16) (expt 2 16))
        (request-cursor-position)
        (finish-output *terminal*))
      ;; Defensive programming: define a deadline for defunct terminals.
      (loop with deadline = (+ (get-universal-time) 2)
            with *request-terminal-size* = t
            for event = (read-input)
            unless (null event)
              do (handle-event *console* event)
            until (or (typep event 'terminal-resize-event)
                      (> (get-universal-time) deadline)))))

  (defgeneric handle-event (client event)
    (:method (client event)
      (declare (ignore client event))))

  (define-condition exit () ())
  (defun exit () (signal 'exit))
#+END_SRC

For now the console will handle only two kinds of events:

- ~terminal-resize-event~ to adjust console dimensions
- ~keyboard-event~ to handle common keystrokes

#+BEGIN_SRC lisp
  (defmethod handle-event ((client console) (event terminal-resize-event))
    (let ((rows (rows event))
          (cols (cols event)))
      (setf (rows client) rows)
      (setf (cols client) cols)
      (setf (r2 (clip client)) rows)
      (setf (c2 (clip client)) cols)
      (adjust-array (data client)
                    (list rows cols)
                    :initial-element nil)))

  (defmethod handle-event ((client console) (event keyboard-event))
    (cond ((keyp event #\Q :c)
           (signal 'exit))
          ((keyp event #\E :c)
           (error "HI!"))
          ((keyp event #\R :c)
           (process-available-events t)
           (clear-terminal)
           (ctl (:bgc #x22222200)
                (:clr 1 1 (rows *console*) (cols *console*))))))
#+END_SRC

The method ~initialize-instance~ defined for method instead of calling
~update-console-dimensiosn~ will now call ~process-available-events~:

#+BEGIN_SRC lisp
(defmethod initialize-instance :after
    ((instance console) &rest args &key fgc bgc row col cvp ptr)
  (setf (hnd instance) (init-terminal))
  (set-mouse-tracking ptr)
  (setf (cur instance)
        (make-instance 'cursor :fgc fgc :bgc bgc :row row :col col :cvp cvp))
  (let ((*console* instance))
    (process-available-events t)))
#+END_SRC

Functions ~get-cursor-position~ and ~update-console-dimensions~ should be
removed now. Additionally remove the function ~handle-event~ from the demo
file and modify the function ~show-screen~:

#+BEGIN_SRC lisp
  #+(or) ;; remove this function
  (defun handle-event #|...|#)

  ;; call process-available-events
  (defun show-screen ()
    (loop with fm = (make-instance 'frame-manager)
          do (ensure-demos fm)
          do (process-available-events)
          do (display-screen fm)
          do (show-modeline)
          do (ctl (:fls))))
#+END_SRC

* Console extensibility

The macro ~with-console~ is quite limited in a sense, that it creates only the
object of class ~console~. If we want to allow extending it by third-party
software the easiest way would be subclassing the console and specializing
necessary methods, and that's how we'll approach that.

#+BEGIN_SRC lisp
  (defmacro with-console ((&rest args
                           &key
                             ios fgc bgc cvp fps
                             (console-class ''console)
                           &allow-other-keys)
                          &body body)
    (declare (ignore fgc bgc cvp fps))
    (remf args :console-class)
    `(let* ((*terminal* ,ios)
            (*console* (make-instance ,console-class ,@args)))
       (unwind-protect (with-buffer (*console*) ,@body)
         (close-terminal (hnd *console*)))))
#+END_SRC

We'll also add a new restart allowing switching the console class at runtime
and for better control transfer.

#+BEGIN_SRC lisp
(defmacro with-console ((&rest args
                         &key
                           ios fgc bgc cvp fps
                           (console-class ''console)
                         &allow-other-keys)
                        &body body)
  (declare (ignore fgc bgc cvp fps))
  (remf args :console-class)
  `(let ((*terminal* ,ios)
         (console-class ,console-class))
     (loop
       (restart-case
           (let ((*console* (make-instance console-class ,@args)))
             (handler-case (with-buffer (*console*) ,@body)
               (error (e)
                 (close-terminal (hnd *console*))
                 (error e))
               (exit (e)
                 (close-terminal (hnd *console*))
                 (return))
               (:no-error (&rest values)
                 (close-terminal (hnd *console*)))))
         (again ()
           :report "Start display again.")
         (change (new-console-class)
           :report "Change the console class."
           :interactive (lambda ()
                          (format *debug-io* "Type the class symbol:~%")
                          (format *debug-io* "~a> '" (package-name *package*))
                          (finish-output *debug-io*)
                          (list (read)))
           (setf console-class new-console-class))))))
#+END_SRC

In the demo the function ~start-display~ reduces to

#+BEGIN_SRC lisp
  (defun start-display ()
    (with-console (:ios *terminal-io*)
      (show-screen)))
#+END_SRC

Now when we are dropped into the debugger, the terminal is properly reset to
accept "normal" keyboard input. "Exitting" the applications simply returns
from a scope of the ~with-console-block~ instead of quitting the lisp process.

We will also introduce a protocol function ~handle-repaint~ which will be
responsible for creating the content. Default method draws nothing. It accepts
two arguments: the client and the region. For now the region is ignored.

#+BEGIN_SRC lisp
  (defgeneric handle-repaint (client region)
    (declare (ignore client region)))
#+END_SRC

This function is complementary to ~flush-buffer~, because it is expected to
populate a buffer in some application-specific manner, while ~flush-buffer~ is
used to "show" the content on the screen.

Now it is time to export new operators from the l1 package:

#+BEGIN_SRC lisp
  (defpackage #:eu.turtleware.charming-clim/l1
    (:export #:with-console #:out #:ctl #:exit)
    (:export #:console #:handle-event #:handle-repaint))
#+END_SRC

